{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM5Dj2uGJQ7S9ePBKljsv+K",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/maoflorez28/Big-Data-2022/blob/main/Limpieza_datos.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mz3C57w8dhRM"
      },
      "outputs": [],
      "source": [
        "# TALLER LIMPIEZA DE DATOS\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import os\n",
        "from pathlib import Path\n",
        "\n",
        "bucket = \"gs://amaldonado_bucket_llamadas123\"\n",
        "\n",
        "def get_data(filename):\n",
        "    \n",
        "#filename=\"llamadas123_julio_2022.csv\"\n",
        "    data_dir=\"raw\"\n",
        "    file_path=os.path.join(bucket,\"data\", data_dir, filename)\n",
        "    data=pd.read_csv(file_path, encoding=\"latin-1\", sep=\";\")\n",
        "    data.head()\n",
        "\n",
        "    print('get_data')\n",
        "    print('La tabla contiene', data.shape[0], 'filas', data.shape[1], 'columnas')\n",
        "    return data\n",
        "\n",
        "def generate_report(data):\n",
        "    # Crear un diccionario vacio\n",
        "    dict_resumen = dict()\n",
        "\n",
        "    # loop para llenar el diccionario de columnas con valores unicos\n",
        "    for col in data.columns:\n",
        "        valores_unicos = data[col].unique()\n",
        "        n_valores = len(valores_unicos)\n",
        "        dict_resumen[col] = n_valores\n",
        "\n",
        "    reporte = pd.DataFrame.from_dict(dict_resumen, orient='index')\n",
        "    reporte.rename({0: 'Count'}, axis=1, inplace=True)\n",
        "\n",
        "    print('generate_report')\n",
        "    print(reporte.head())\n",
        "    return reporte\n",
        "\n",
        "def save_data(reporte, filename):\n",
        "    # Guardar la tabla:\n",
        "\n",
        "    out_name = 'resumen_' + filename\n",
        "    out_path = os.path.join(bucket, 'data', 'processed', out_name)\n",
        "    reporte.to_csv(out_path)\n",
        "    \n",
        "    print(\"Guardado en BQ\")\n",
        "    # Guardar la tabla en BigQuery\n",
        "    reporte.to_gbq(destination_table=\"linen-synthesis-364223.llamadas_123\",)\n",
        "\n",
        "def main():\n",
        "\n",
        "    filename = \"llamadas123_julio_2022.csv\"\n",
        "    data = get_data(filename)\n",
        "    reporte = generate_report(data)\n",
        "    save_data(reporte, filename)\n",
        "\n",
        "    print('DONE!!!')\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    main()\n",
        "    \n",
        "# Registros duplicados\n",
        "\n",
        "    bucket = \"gs://amaldonado_bucket_llamadas123\"\n",
        "\n",
        "def get_data(filename):\n",
        "    data_dir=\"raw\"\n",
        "    file_path=os.path.join(bucket,\"data\", data_dir, filename)\n",
        "    data=pd.read_csv(file_path, encoding=\"latin-1\", sep=\";\")\n",
        "    print(\"forma incial\", data.shape)\n",
        "    data=data.drop_duplicates() \n",
        "    print(\"forma final\", data.shape)\n",
        "    data.info()\n",
        "\n",
        "# cuente los diferentes valores\n",
        "    data[\"UNIDAD\"].value_counts(dropna=False)\n",
        "\n",
        "# reemplace en la columna unidad los nulos por SIN_DATO\n",
        "    data[\"UNIDAD\"].fillna(\"SIN_DATO\").value_counts(dropna=False, normalize=False)\n",
        "    data[\"UNIDAD\"]=data[\"UNIDAD\"].fillna(\"SIN_DATO\")\n",
        "    data.info()\n",
        "\n",
        "# Manipule las fechas \n",
        "    col=\"FECHA_INICIO_DESPLAZAMIENTO_MOVIL\"\n",
        "    data[col].max()\n",
        "\n",
        "# Aplique filtros\n",
        "    val_min=data[col].min()\n",
        "    data[data[col] != val_min]\n",
        "\n",
        "# Datetime\n",
        "    data[col]=pd.to_datetime(data[col], errors=\"coerce\")\n",
        "    data.info()\n",
        "\n",
        "    data[\"RECEPCION\"]\n",
        "    val_min=data[col].min()\n",
        "    data[data[col] == val_min]\n",
        "\n",
        "from dateutil.parser import parse\n",
        "parse(\"08/02/2021\")\n",
        "def convertir_formato_fecha(str_fecha):\n",
        "    val_datetime=parse(str_fecha, dayfirst=False)\n",
        "    return val_datetime\n",
        "\n",
        "    data=data.reset_index()\n",
        "\n"
      ]
    }
  ]
}